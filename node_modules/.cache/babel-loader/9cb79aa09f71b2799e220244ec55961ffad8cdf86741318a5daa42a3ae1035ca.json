{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/bruno/Documentos/Teste Aiko - FRONT END/teste-frontend-v4/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/home/bruno/Documentos/Teste Aiko - FRONT END/teste-frontend-v4/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/bruno/Documentos/Teste Aiko - FRONT END/teste-frontend-v4/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport equipmentData from \"../data/equipment.json\"; // Equipamentos\nimport equipmentModelData from \"../data/equipmentModel.json\"; // Modelos\nimport equipmentStateData from \"../data/equipmentState.json\"; // Estados\nimport equipmentStateHistory from \"../data/equipmentStateHistory.json\"; // Histórico de Estados\nimport equipmentPositionHistory from \"../data/equipmentPositionHistory.json\"; // Histórico de Posições\n\nexport default {\n  name: \"LMap\",\n  data: function data() {\n    return {\n      positionHistory: equipmentPositionHistory,\n      stateHistory: equipmentStateHistory,\n      equipmentStates: equipmentStateData,\n      // Dados importados do JSON\n      showHistoryDialog: false,\n      // Controle do diálogo de histórico\n      selectedEquipmentId: null,\n      // ID do equipamento selecionado para exibir o histórico\n      selectedEquipmentStateHistory: [] // Histórico de estados do equipamento selecionado\n    };\n  },\n  mounted: function mounted() {\n    this.createMapLayer();\n  },\n  beforeUnmount: function beforeUnmount() {\n    var _this = this;\n    // Remover o mapa e suas camadas, se necessário\n    if (this.map) {\n      this.map.eachLayer(function (layer) {\n        _this.map.removeLayer(layer); // Remover todos os layers para evitar problemas\n      });\n      this.map.remove(); // Remove completamente o mapa\n    }\n  },\n  methods: {\n    createMapLayer: function createMapLayer() {\n      var _this2 = this;\n      // Inicialize o mapa localmente\n      var map = L.map(\"mapContainer\").setView([-23.5505, -46.6333], 5);\n      L.tileLayer(\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\n        attribution: '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(map);\n      map.whenReady(function () {\n        _this2.setMarkers(map);\n      });\n    },\n    createStateIcon: function createStateIcon(stateColor) {\n      try {\n        var iconUrl = require(\"../assets/aiko.png\");\n        return L.divIcon({\n          className: \"custom-icon\",\n          html: \"\\n            <div style=\\\"position: relative; width: 40px; height: 40px;\\\">\\n              <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"45\\\" height=\\\"60\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"\".concat(stateColor, \"\\\">\\n                <path d=\\\"M12 2C8.14 2 5 5.14 5 9c0 3.39 3.27 7.94 6.36 11.54.4.47 1.12.47 1.51 0C15.73 16.94 19 12.39 19 9c0-3.86-3.14-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5S10.62 6.5 12 6.5s2.5 1.12 2.5 2.5S13.38 11.5 12 11.5z\\\"/>\\n              </svg>\\n              <img src=\\\"\").concat(iconUrl, \"\\\" style=\\\"position: absolute; top: 5%; left:55%; width: 25px; height: 12px; transform: translate(-50%, -50%);\\\" />\\n            </div>\\n          \")\n        });\n      } catch (error) {\n        console.error(\"Erro ao criar o ícone de estado:\", error);\n      }\n    },\n    setMarkers: function setMarkers(map) {\n      var _this3 = this;\n      var bounds = [];\n      this.positionHistory.forEach(function (equipment) {\n        var latestPosition = _this3.getLatestPosition(equipment.positions);\n        var equipmentInfo = _this3.getEquipmentInfo(equipment.equipmentId);\n        if (latestPosition && equipmentInfo) {\n          var stateColor = equipmentInfo.stateColor;\n          var customIcon = _this3.createStateIcon(stateColor);\n          if (latestPosition.lat !== null && latestPosition.lon !== null) {\n            var marker = L.marker([latestPosition.lat, latestPosition.lon], {\n              icon: customIcon\n            }).addTo(map).bindPopup(\"\\n                  <div style=\\\"text-align: center; margin-bottom: 10px;\\\">\\n                    <div style=\\\"font-size: 16px; font-weight: bold; color: \".concat(equipmentInfo.stateColor, \";\\\">\\n                      \").concat(equipmentInfo.stateName, \"\\n                    </div>\\n                    <div>\\n                      <img src=\\\"\").concat(_this3.getModelImage(equipmentInfo.modelName), \"\\\" alt=\\\"\").concat(equipmentInfo.modelName, \"\\\" style=\\\"width: 60px; height: 60px;\\\" />\\n                    </div>\\n                  </div>\\n                  <b>Equipamento:</b> \").concat(equipmentInfo.name, \" <br>\\n                  <b>Modelo:</b> \").concat(equipmentInfo.modelName, \" <br>\\n                  <b>\\xDAltima posi\\xE7\\xE3o:</b> \").concat(_this3.formatDate(latestPosition.date), \"\\n                \"));\n            marker.on(\"mouseover\", function () {\n              marker.openPopup();\n            });\n            marker.on(\"click\", function () {\n              _this3.selectedEquipmentId = equipment.equipmentId;\n\n              // Carregar o histórico de estados antes de abrir o diálogo\n              _this3.loadEquipmentStateHistory(equipment.equipmentId);\n\n              // Exibir o diálogo depois de carregar o histórico\n              _this3.showHistoryDialog = true;\n            });\n            bounds.push([latestPosition.lat, latestPosition.lon]);\n          }\n        }\n      });\n      if (map && bounds.length > 0) {\n        map.fitBounds(bounds);\n      }\n    },\n    // Função para obter o estado mais recente baseado na última posição\n    getLatestStateBasedOnPosition: function getLatestStateBasedOnPosition(equipmentId, lastPositionDate) {\n      var stateHistory = this.stateHistory.find(function (history) {\n        return history.equipmentId === equipmentId;\n      });\n      if (!stateHistory) return null;\n\n      // Encontrar o estado cujo intervalo inclui a última data de posição\n      var latestState = stateHistory.states.find(function (state) {\n        var startDate = new Date(state.date);\n        var endDate = new Date(state.endDate || state.date); // Supondo que `endDate` pode não estar presente e usar a mesma data para ambos os campos\n\n        return lastPositionDate >= startDate && lastPositionDate <= endDate;\n      });\n      return latestState ? this.getStateInfo(latestState.equipmentStateId) : null;\n    },\n    // Função para obter as informações do estado\n    getStateInfo: function getStateInfo(stateId) {\n      var state = equipmentStateData.find(function (s) {\n        return s.id === stateId;\n      });\n      return state ? {\n        name: state.name,\n        color: state.color\n      } : {\n        name: \"Desconhecido\",\n        color: \"#000000\"\n      };\n    },\n    // Função para carregar o histórico do equipamento\n    loadEquipmentStateHistory: function loadEquipmentStateHistory(equipmentId) {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this4.selectedEquipmentStateHistory = _this4.getEquipmentStateHistory(equipmentId);\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    getStateColor: function getStateColor(equipmentStateId) {\n      // Retorna a cor correspondente ao ID do estado\n      var state = this.equipmentStates.find(function (s) {\n        return s.id === equipmentStateId;\n      });\n      return state ? state.color : \"gray\"; // Retorna cinza se o estado não for encontrado\n    },\n    closeDialog: function closeDialog() {\n      this.showHistoryDialog = false;\n    },\n    getLatestPosition: function getLatestPosition(positions) {\n      return positions.reduce(function (latest, position) {\n        return new Date(position.date) > new Date(latest.date) ? position : latest;\n      }, positions[0]);\n    },\n    getEquipmentInfo: function getEquipmentInfo(equipmentId) {\n      var equipment = equipmentData.find(function (eq) {\n        return eq.id === equipmentId;\n      });\n      if (!equipment) return null;\n      var model = equipmentModelData.find(function (model) {\n        return model.id === equipment.equipmentModelId;\n      });\n      var latestState = this.getLatestState(equipmentId);\n      var state = equipmentStateData.find(function (state) {\n        return state.id === (latestState === null || latestState === void 0 ? void 0 : latestState.equipmentStateId);\n      });\n      return {\n        name: equipment.name,\n        modelName: model ? model.name : \"Desconhecido\",\n        stateName: state ? state.name : \"Desconhecido\",\n        stateColor: state ? state.color : \"#000000\"\n      };\n    },\n    getLatestState: function getLatestState(equipmentId) {\n      // 1. Busca o histórico de estados do equipamento\n      var stateHistory = this.stateHistory.find(function (history) {\n        return history.equipmentId === equipmentId;\n      });\n      if (!stateHistory) return null;\n\n      // 2. Busca o histórico de posições do equipamento\n      var positionHistory = this.positionHistory.find(function (history) {\n        return history.equipmentId === equipmentId;\n      });\n      if (!positionHistory) return null;\n\n      // 3. Encontra a data mais recente no positionHistory\n      var latestPosition = positionHistory.positions.reduce(function (latest, position) {\n        return new Date(position.date) > new Date(latest.date) ? position : latest;\n      }, positionHistory.positions[0]);\n\n      // 4. Compara a data mais recente de positionHistory com os estados de stateHistory\n      var previousState = null;\n      var _iterator = _createForOfIteratorHelper(stateHistory.states),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var state = _step.value;\n          if (new Date(state.date) === new Date(latestPosition.date)) {\n            // 5. Se as datas coincidirem, retorna o equipmentStateId\n            return state;\n          } else if (new Date(state.date) > new Date(latestPosition.date)) {\n            // 6. Se o estado atual passa a data de positionHistory, retorna o estado anterior\n            return previousState ? previousState : stateHistory.states[0];\n          }\n\n          // 7. Atualiza o estado anterior caso a data não tenha ultrapassado\n          previousState = state;\n        }\n\n        // 8. Se nenhum estado ultrapassou, retorna o estado mais recente disponível\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return previousState;\n    },\n    getEquipmentStateHistory: function getEquipmentStateHistory(equipmentId) {\n      var stateHistory = this.stateHistory.find(function (history) {\n        return history.equipmentId === equipmentId;\n      });\n      return stateHistory ? stateHistory.states : [];\n    },\n    getStateName: function getStateName(stateId) {\n      var state = equipmentStateData.find(function (s) {\n        return s.id === stateId;\n      });\n      return state ? state.name : \"Desconhecido\";\n    },\n    getModelImage: function getModelImage(modelName) {\n      var modelImageMap = {\n        \"Caminhão de carga\": require(\"../assets/caminhao.png\"),\n        Harvester: require(\"../assets/escavadora.png\"),\n        \"Garra traçadora\": require(\"../assets/garra-de-escavadeira.png\")\n      };\n      return modelImageMap[modelName] || require(\"../assets/aiko.png\");\n    },\n    formatDate: function formatDate(dateString) {\n      var options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        timeZone: \"UTC\"\n      };\n      var date = new Date(dateString);\n      return new Intl.DateTimeFormat(\"pt-BR\", options).format(date);\n    }\n  }\n};","map":{"version":3,"names":["L","equipmentData","equipmentModelData","equipmentStateData","equipmentStateHistory","equipmentPositionHistory","name","data","positionHistory","stateHistory","equipmentStates","showHistoryDialog","selectedEquipmentId","selectedEquipmentStateHistory","mounted","createMapLayer","beforeUnmount","_this","map","eachLayer","layer","removeLayer","remove","methods","_this2","setView","tileLayer","attribution","addTo","whenReady","setMarkers","createStateIcon","stateColor","iconUrl","require","divIcon","className","html","concat","error","console","_this3","bounds","forEach","equipment","latestPosition","getLatestPosition","positions","equipmentInfo","getEquipmentInfo","equipmentId","customIcon","lat","lon","marker","icon","bindPopup","stateName","getModelImage","modelName","formatDate","date","on","openPopup","loadEquipmentStateHistory","push","length","fitBounds","getLatestStateBasedOnPosition","lastPositionDate","find","history","latestState","states","state","startDate","Date","endDate","getStateInfo","equipmentStateId","stateId","s","id","color","_this4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","getEquipmentStateHistory","stop","getStateColor","closeDialog","reduce","latest","position","eq","model","equipmentModelId","getLatestState","previousState","_iterator","_createForOfIteratorHelper","_step","n","done","value","err","e","f","getStateName","modelImageMap","Harvester","dateString","options","day","month","year","hour","minute","timeZone","Intl","DateTimeFormat","format"],"sources":["/home/bruno/Documentos/Teste Aiko - FRONT END/teste-frontend-v4/src/components/LMap.vue"],"sourcesContent":["<template>\r\n   <div id=\"mapContainer\" />\r\n\r\n    <!-- Diálogo que mostra o histórico completo dos estados -->\r\n    <v-dialog v-model=\"showHistoryDialog\" max-width=\"500px\">\r\n      <v-card>\r\n        <v-card-title\r\n          class=\"d-flex justify-space-between align-center mt-3 ml-14 text-xs-h8\"\r\n        >\r\n          <span class=\"text-h8\">Histórico de Estados</span>\r\n          <v-btn size=\"x-small\" variant=\"text\" icon @click=\"closeDialog\">\r\n            <v-icon icon=\"mdi-close\"></v-icon>\r\n          </v-btn>\r\n        </v-card-title>\r\n        <v-divider\r\n          color=\"teal\"\r\n          class=\"border-opacity-100\"\r\n          :thickness=\"2\"\r\n          inset\r\n        ></v-divider>\r\n\r\n        <v-card-text>\r\n          <v-list dense>\r\n            <v-list-item\r\n              v-for=\"(state, index) in selectedEquipmentStateHistory\"\r\n              :key=\"index\"\r\n            >\r\n              <v-list-item-content class=\"my-2\">\r\n                <v-list-item-title class=\"mb-1\">\r\n                  <v-icon left>mdi-calendar</v-icon>\r\n                  <!-- Ícone ao lado da data -->\r\n                  {{ formatDate(state.date) }}\r\n                </v-list-item-title>\r\n                <v-list-item-subtitle class=\"mb-1\">\r\n                  <v-icon :color=\"getStateColor(state.equipmentStateId)\" left\r\n                    >mdi-circle</v-icon\r\n                  >\r\n                  <!-- Ícone ao lado do estado -->\r\n                  {{ getStateName(state.equipmentStateId) }}\r\n                </v-list-item-subtitle>\r\n              </v-list-item-content>\r\n              <v-divider :thickness=\"3\" color=\"gray\"></v-divider>\r\n            </v-list-item>\r\n          </v-list>\r\n        </v-card-text>\r\n        <v-row justify=\"center\">\r\n          <v-card-actions  class=\"mb-5\">\r\n          <v-btn variant=\"flat\" color=\"teal\" @click=\"closeDialog\">Fechar</v-btn>\r\n        </v-card-actions>\r\n        </v-row>\r\n        \r\n      </v-card>\r\n    </v-dialog>\r\n \r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport equipmentData from \"../data/equipment.json\"; // Equipamentos\r\nimport equipmentModelData from \"../data/equipmentModel.json\"; // Modelos\r\nimport equipmentStateData from \"../data/equipmentState.json\"; // Estados\r\nimport equipmentStateHistory from \"../data/equipmentStateHistory.json\"; // Histórico de Estados\r\nimport equipmentPositionHistory from \"../data/equipmentPositionHistory.json\"; // Histórico de Posições\r\n\r\nexport default {\r\n  name: \"LMap\",\r\n  data() {\r\n    return {\r\n      positionHistory: equipmentPositionHistory,\r\n      stateHistory: equipmentStateHistory,\r\n      equipmentStates: equipmentStateData, // Dados importados do JSON\r\n      showHistoryDialog: false, // Controle do diálogo de histórico\r\n      selectedEquipmentId: null, // ID do equipamento selecionado para exibir o histórico\r\n      selectedEquipmentStateHistory: [], // Histórico de estados do equipamento selecionado\r\n    };\r\n  },\r\n  mounted() {\r\n    this.createMapLayer();\r\n  },\r\n  beforeUnmount() {\r\n    // Remover o mapa e suas camadas, se necessário\r\n    if (this.map) {\r\n      this.map.eachLayer((layer) => {\r\n        this.map.removeLayer(layer); // Remover todos os layers para evitar problemas\r\n      });\r\n      this.map.remove(); // Remove completamente o mapa\r\n    }\r\n  },\r\n  methods: {\r\n    createMapLayer() {\r\n      // Inicialize o mapa localmente\r\n      const map = L.map(\"mapContainer\").setView([-23.5505, -46.6333], 5);\r\n\r\n      L.tileLayer(\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\r\n        attribution:\r\n          '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n      }).addTo(map);\r\n\r\n      map.whenReady(() => {\r\n        this.setMarkers(map);\r\n      });\r\n    },\r\n\r\n    createStateIcon(stateColor) {\r\n      try {\r\n        const iconUrl = require(\"../assets/aiko.png\");\r\n\r\n        return L.divIcon({\r\n          className: \"custom-icon\",\r\n          html: `\r\n            <div style=\"position: relative; width: 40px; height: 40px;\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"45\" height=\"60\" viewBox=\"0 0 24 24\" fill=\"${stateColor}\">\r\n                <path d=\"M12 2C8.14 2 5 5.14 5 9c0 3.39 3.27 7.94 6.36 11.54.4.47 1.12.47 1.51 0C15.73 16.94 19 12.39 19 9c0-3.86-3.14-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5S10.62 6.5 12 6.5s2.5 1.12 2.5 2.5S13.38 11.5 12 11.5z\"/>\r\n              </svg>\r\n              <img src=\"${iconUrl}\" style=\"position: absolute; top: 5%; left:55%; width: 25px; height: 12px; transform: translate(-50%, -50%);\" />\r\n            </div>\r\n          `,\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Erro ao criar o ícone de estado:\", error);\r\n      }\r\n    },\r\n\r\n    setMarkers(map) {\r\n      const bounds = [];\r\n\r\n      this.positionHistory.forEach((equipment) => {\r\n        const latestPosition = this.getLatestPosition(equipment.positions);\r\n        const equipmentInfo = this.getEquipmentInfo(equipment.equipmentId);\r\n\r\n        if (latestPosition && equipmentInfo) {\r\n          const stateColor = equipmentInfo.stateColor;\r\n\r\n          const customIcon = this.createStateIcon(stateColor);\r\n\r\n          if (latestPosition.lat !== null && latestPosition.lon !== null) {\r\n            const marker = L.marker([latestPosition.lat, latestPosition.lon], {\r\n              icon: customIcon,\r\n            })\r\n              .addTo(map)\r\n              .bindPopup(\r\n                `\r\n                  <div style=\"text-align: center; margin-bottom: 10px;\">\r\n                    <div style=\"font-size: 16px; font-weight: bold; color: ${\r\n                      equipmentInfo.stateColor\r\n                    };\">\r\n                      ${equipmentInfo.stateName}\r\n                    </div>\r\n                    <div>\r\n                      <img src=\"${this.getModelImage(\r\n                        equipmentInfo.modelName\r\n                      )}\" alt=\"${\r\n                  equipmentInfo.modelName\r\n                }\" style=\"width: 60px; height: 60px;\" />\r\n                    </div>\r\n                  </div>\r\n                  <b>Equipamento:</b> ${equipmentInfo.name} <br>\r\n                  <b>Modelo:</b> ${equipmentInfo.modelName} <br>\r\n                  <b>Última posição:</b> ${this.formatDate(latestPosition.date)}\r\n                `\r\n              );\r\n\r\n            marker.on(\"mouseover\", () => {\r\n              marker.openPopup();\r\n            });\r\n\r\n            marker.on(\"click\", () => {\r\n              this.selectedEquipmentId = equipment.equipmentId;\r\n\r\n              // Carregar o histórico de estados antes de abrir o diálogo\r\n              this.loadEquipmentStateHistory(equipment.equipmentId);\r\n\r\n              // Exibir o diálogo depois de carregar o histórico\r\n              this.showHistoryDialog = true;\r\n            });\r\n\r\n            bounds.push([latestPosition.lat, latestPosition.lon]);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (map && bounds.length > 0) {\r\n        map.fitBounds(bounds);\r\n      }\r\n    },\r\n\r\n    // Função para obter o estado mais recente baseado na última posição\r\n    getLatestStateBasedOnPosition(equipmentId, lastPositionDate) {\r\n      const stateHistory = this.stateHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n\r\n      if (!stateHistory) return null;\r\n\r\n      // Encontrar o estado cujo intervalo inclui a última data de posição\r\n      const latestState = stateHistory.states.find((state) => {\r\n        const startDate = new Date(state.date);\r\n        const endDate = new Date(state.endDate || state.date); // Supondo que `endDate` pode não estar presente e usar a mesma data para ambos os campos\r\n\r\n        return lastPositionDate >= startDate && lastPositionDate <= endDate;\r\n      });\r\n\r\n      return latestState\r\n        ? this.getStateInfo(latestState.equipmentStateId)\r\n        : null;\r\n    },\r\n\r\n    // Função para obter as informações do estado\r\n    getStateInfo(stateId) {\r\n      const state = equipmentStateData.find((s) => s.id === stateId);\r\n      return state\r\n        ? { name: state.name, color: state.color }\r\n        : { name: \"Desconhecido\", color: \"#000000\" };\r\n    },\r\n\r\n    // Função para carregar o histórico do equipamento\r\n    async loadEquipmentStateHistory(equipmentId) {\r\n      this.selectedEquipmentStateHistory =\r\n        this.getEquipmentStateHistory(equipmentId);\r\n    },\r\n\r\n    getStateColor(equipmentStateId) {\r\n      // Retorna a cor correspondente ao ID do estado\r\n      const state = this.equipmentStates.find((s) => s.id === equipmentStateId);\r\n      return state ? state.color : \"gray\"; // Retorna cinza se o estado não for encontrado\r\n    },\r\n\r\n    closeDialog() {\r\n      this.showHistoryDialog = false;\r\n    },\r\n\r\n    getLatestPosition(positions) {\r\n      return positions.reduce((latest, position) => {\r\n        return new Date(position.date) > new Date(latest.date)\r\n          ? position\r\n          : latest;\r\n      }, positions[0]);\r\n    },\r\n\r\n    getEquipmentInfo(equipmentId) {\r\n      const equipment = equipmentData.find((eq) => eq.id === equipmentId);\r\n      if (!equipment) return null;\r\n\r\n      const model = equipmentModelData.find(\r\n        (model) => model.id === equipment.equipmentModelId\r\n      );\r\n      const latestState = this.getLatestState(equipmentId);\r\n      const state = equipmentStateData.find(\r\n        (state) => state.id === latestState?.equipmentStateId\r\n      );\r\n\r\n      return {\r\n        name: equipment.name,\r\n        modelName: model ? model.name : \"Desconhecido\",\r\n        stateName: state ? state.name : \"Desconhecido\",\r\n        stateColor: state ? state.color : \"#000000\",\r\n      };\r\n    },\r\n\r\n    getLatestState(equipmentId) {\r\n      // 1. Busca o histórico de estados do equipamento\r\n      const stateHistory = this.stateHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n      if (!stateHistory) return null;\r\n\r\n      // 2. Busca o histórico de posições do equipamento\r\n      const positionHistory = this.positionHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n      if (!positionHistory) return null;\r\n\r\n      // 3. Encontra a data mais recente no positionHistory\r\n      const latestPosition = positionHistory.positions.reduce(\r\n        (latest, position) => {\r\n          return new Date(position.date) > new Date(latest.date)\r\n            ? position\r\n            : latest;\r\n        },\r\n        positionHistory.positions[0]\r\n      );\r\n\r\n      // 4. Compara a data mais recente de positionHistory com os estados de stateHistory\r\n      let previousState = null;\r\n\r\n      for (const state of stateHistory.states) {\r\n        if (new Date(state.date) === new Date(latestPosition.date)) {\r\n          // 5. Se as datas coincidirem, retorna o equipmentStateId\r\n          return state;\r\n        } else if (new Date(state.date) > new Date(latestPosition.date)) {\r\n          // 6. Se o estado atual passa a data de positionHistory, retorna o estado anterior\r\n          return previousState ? previousState : stateHistory.states[0];\r\n        }\r\n\r\n        // 7. Atualiza o estado anterior caso a data não tenha ultrapassado\r\n        previousState = state;\r\n      }\r\n\r\n      // 8. Se nenhum estado ultrapassou, retorna o estado mais recente disponível\r\n      return previousState;\r\n    },\r\n\r\n    getEquipmentStateHistory(equipmentId) {\r\n      const stateHistory = this.stateHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n      return stateHistory ? stateHistory.states : [];\r\n    },\r\n\r\n    getStateName(stateId) {\r\n      const state = equipmentStateData.find((s) => s.id === stateId);\r\n      return state ? state.name : \"Desconhecido\";\r\n    },\r\n\r\n    getModelImage(modelName) {\r\n      const modelImageMap = {\r\n        \"Caminhão de carga\": require(\"../assets/caminhao.png\"),\r\n        Harvester: require(\"../assets/escavadora.png\"),\r\n        \"Garra traçadora\": require(\"../assets/garra-de-escavadeira.png\"),\r\n      };\r\n\r\n      return modelImageMap[modelName] || require(\"../assets/aiko.png\");\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      const options = {\r\n        day: \"2-digit\",\r\n        month: \"2-digit\",\r\n        year: \"numeric\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        timeZone: \"UTC\",\r\n      };\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat(\"pt-BR\", options).format(date);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n#mapContainer {\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 75vh;\r\n  z-index: 1;\r\n}\r\n.custom-icon {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;;AAyDA,OAAOA,CAAA,MAAO,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,aAAY,MAAO,wBAAwB,EAAE;AACpD,OAAOC,kBAAiB,MAAO,6BAA6B,EAAE;AAC9D,OAAOC,kBAAiB,MAAO,6BAA6B,EAAE;AAC9D,OAAOC,qBAAoB,MAAO,oCAAoC,EAAE;AACxE,OAAOC,wBAAuB,MAAO,uCAAuC,EAAE;;AAE9E,eAAe;EACbC,IAAI,EAAE,MAAM;EACZC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAEH,wBAAwB;MACzCI,YAAY,EAAEL,qBAAqB;MACnCM,eAAe,EAAEP,kBAAkB;MAAE;MACrCQ,iBAAiB,EAAE,KAAK;MAAE;MAC1BC,mBAAmB,EAAE,IAAI;MAAE;MAC3BC,6BAA6B,EAAE,EAAE,CAAE;IACrC,CAAC;EACH,CAAC;EACDC,OAAO,WAAPA,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,aAAa,WAAbA,aAAaA,CAAA,EAAG;IAAA,IAAAC,KAAA;IACd;IACA,IAAI,IAAI,CAACC,GAAG,EAAE;MACZ,IAAI,CAACA,GAAG,CAACC,SAAS,CAAC,UAACC,KAAK,EAAK;QAC5BH,KAAI,CAACC,GAAG,CAACG,WAAW,CAACD,KAAK,CAAC,EAAE;MAC/B,CAAC,CAAC;MACF,IAAI,CAACF,GAAG,CAACI,MAAM,CAAC,CAAC,EAAE;IACrB;EACF,CAAC;EACDC,OAAO,EAAE;IACPR,cAAc,WAAdA,cAAcA,CAAA,EAAG;MAAA,IAAAS,MAAA;MACf;MACA,IAAMN,GAAE,GAAIlB,CAAC,CAACkB,GAAG,CAAC,cAAc,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;MAElEzB,CAAC,CAAC0B,SAAS,CAAC,0CAA0C,EAAE;QACtDC,WAAW,EACT;MACJ,CAAC,CAAC,CAACC,KAAK,CAACV,GAAG,CAAC;MAEbA,GAAG,CAACW,SAAS,CAAC,YAAM;QAClBL,MAAI,CAACM,UAAU,CAACZ,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IAEDa,eAAe,WAAfA,eAAeA,CAACC,UAAU,EAAE;MAC1B,IAAI;QACF,IAAMC,OAAM,GAAIC,OAAO,CAAC,oBAAoB,CAAC;QAE7C,OAAOlC,CAAC,CAACmC,OAAO,CAAC;UACfC,SAAS,EAAE,aAAa;UACxBC,IAAI,mMAAAC,MAAA,CAE2FN,UAAU,mSAAAM,MAAA,CAGzFL,OAAO;QAGzB,CAAC,CAAC;MACJ,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDT,UAAU,WAAVA,UAAUA,CAACZ,GAAG,EAAE;MAAA,IAAAuB,MAAA;MACd,IAAMC,MAAK,GAAI,EAAE;MAEjB,IAAI,CAAClC,eAAe,CAACmC,OAAO,CAAC,UAACC,SAAS,EAAK;QAC1C,IAAMC,cAAa,GAAIJ,MAAI,CAACK,iBAAiB,CAACF,SAAS,CAACG,SAAS,CAAC;QAClE,IAAMC,aAAY,GAAIP,MAAI,CAACQ,gBAAgB,CAACL,SAAS,CAACM,WAAW,CAAC;QAElE,IAAIL,cAAa,IAAKG,aAAa,EAAE;UACnC,IAAMhB,UAAS,GAAIgB,aAAa,CAAChB,UAAU;UAE3C,IAAMmB,UAAS,GAAIV,MAAI,CAACV,eAAe,CAACC,UAAU,CAAC;UAEnD,IAAIa,cAAc,CAACO,GAAE,KAAM,IAAG,IAAKP,cAAc,CAACQ,GAAE,KAAM,IAAI,EAAE;YAC9D,IAAMC,MAAK,GAAItD,CAAC,CAACsD,MAAM,CAAC,CAACT,cAAc,CAACO,GAAG,EAAEP,cAAc,CAACQ,GAAG,CAAC,EAAE;cAChEE,IAAI,EAAEJ;YACR,CAAC,EACEvB,KAAK,CAACV,GAAG,EACTsC,SAAS,8JAAAlB,MAAA,CAIFU,aAAa,CAAChB,UAAS,kCAAAM,MAAA,CAErBU,aAAa,CAACS,SAAS,gGAAAnB,MAAA,CAGbG,MAAI,CAACiB,aAAa,CAC5BV,aAAa,CAACW,SAChB,CAAC,eAAArB,MAAA,CACLU,aAAa,CAACW,SAAQ,8IAAArB,MAAA,CAIAU,aAAa,CAAC1C,IAAI,8CAAAgC,MAAA,CACvBU,aAAa,CAACW,SAAS,+DAAArB,MAAA,CACfG,MAAI,CAACmB,UAAU,CAACf,cAAc,CAACgB,IAAI,CAAC,uBAEjE,CAAC;YAEHP,MAAM,CAACQ,EAAE,CAAC,WAAW,EAAE,YAAM;cAC3BR,MAAM,CAACS,SAAS,CAAC,CAAC;YACpB,CAAC,CAAC;YAEFT,MAAM,CAACQ,EAAE,CAAC,OAAO,EAAE,YAAM;cACvBrB,MAAI,CAAC7B,mBAAkB,GAAIgC,SAAS,CAACM,WAAW;;cAEhD;cACAT,MAAI,CAACuB,yBAAyB,CAACpB,SAAS,CAACM,WAAW,CAAC;;cAErD;cACAT,MAAI,CAAC9B,iBAAgB,GAAI,IAAI;YAC/B,CAAC,CAAC;YAEF+B,MAAM,CAACuB,IAAI,CAAC,CAACpB,cAAc,CAACO,GAAG,EAAEP,cAAc,CAACQ,GAAG,CAAC,CAAC;UACvD;QACF;MACF,CAAC,CAAC;MAEF,IAAInC,GAAE,IAAKwB,MAAM,CAACwB,MAAK,GAAI,CAAC,EAAE;QAC5BhD,GAAG,CAACiD,SAAS,CAACzB,MAAM,CAAC;MACvB;IACF,CAAC;IAED;IACA0B,6BAA6B,WAA7BA,6BAA6BA,CAAClB,WAAW,EAAEmB,gBAAgB,EAAE;MAC3D,IAAM5D,YAAW,GAAI,IAAI,CAACA,YAAY,CAAC6D,IAAI,CACzC,UAACC,OAAO;QAAA,OAAKA,OAAO,CAACrB,WAAU,KAAMA,WAAU;MAAA,CACjD,CAAC;MAED,IAAI,CAACzC,YAAY,EAAE,OAAO,IAAI;;MAE9B;MACA,IAAM+D,WAAU,GAAI/D,YAAY,CAACgE,MAAM,CAACH,IAAI,CAAC,UAACI,KAAK,EAAK;QACtD,IAAMC,SAAQ,GAAI,IAAIC,IAAI,CAACF,KAAK,CAACb,IAAI,CAAC;QACtC,IAAMgB,OAAM,GAAI,IAAID,IAAI,CAACF,KAAK,CAACG,OAAM,IAAKH,KAAK,CAACb,IAAI,CAAC,EAAE;;QAEvD,OAAOQ,gBAAe,IAAKM,SAAQ,IAAKN,gBAAe,IAAKQ,OAAO;MACrE,CAAC,CAAC;MAEF,OAAOL,WAAU,GACb,IAAI,CAACM,YAAY,CAACN,WAAW,CAACO,gBAAgB,IAC9C,IAAI;IACV,CAAC;IAED;IACAD,YAAY,WAAZA,YAAYA,CAACE,OAAO,EAAE;MACpB,IAAMN,KAAI,GAAIvE,kBAAkB,CAACmE,IAAI,CAAC,UAACW,CAAC;QAAA,OAAKA,CAAC,CAACC,EAAC,KAAMF,OAAO;MAAA,EAAC;MAC9D,OAAON,KAAI,GACP;QAAEpE,IAAI,EAAEoE,KAAK,CAACpE,IAAI;QAAE6E,KAAK,EAAET,KAAK,CAACS;MAAM,IACvC;QAAE7E,IAAI,EAAE,cAAc;QAAE6E,KAAK,EAAE;MAAU,CAAC;IAChD,CAAC;IAED;IACMnB,yBAAyB,WAAzBA,yBAAyBA,CAACd,WAAW,EAAE;MAAA,IAAAkC,MAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC3CT,MAAI,CAACvE,6BAA4B,GAC/BuE,MAAI,CAACU,wBAAwB,CAAC5C,WAAW,CAAC;YAAA;YAAA;cAAA,OAAAyC,QAAA,CAAAI,IAAA;UAAA;QAAA,GAAAP,OAAA;MAAA;IAC9C,CAAC;IAEDQ,aAAa,WAAbA,aAAaA,CAACjB,gBAAgB,EAAE;MAC9B;MACA,IAAML,KAAI,GAAI,IAAI,CAAChE,eAAe,CAAC4D,IAAI,CAAC,UAACW,CAAC;QAAA,OAAKA,CAAC,CAACC,EAAC,KAAMH,gBAAgB;MAAA,EAAC;MACzE,OAAOL,KAAI,GAAIA,KAAK,CAACS,KAAI,GAAI,MAAM,EAAE;IACvC,CAAC;IAEDc,WAAW,WAAXA,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACtF,iBAAgB,GAAI,KAAK;IAChC,CAAC;IAEDmC,iBAAiB,WAAjBA,iBAAiBA,CAACC,SAAS,EAAE;MAC3B,OAAOA,SAAS,CAACmD,MAAM,CAAC,UAACC,MAAM,EAAEC,QAAQ,EAAK;QAC5C,OAAO,IAAIxB,IAAI,CAACwB,QAAQ,CAACvC,IAAI,IAAI,IAAIe,IAAI,CAACuB,MAAM,CAACtC,IAAI,IACjDuC,QAAO,GACPD,MAAM;MACZ,CAAC,EAAEpD,SAAS,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAEDE,gBAAgB,WAAhBA,gBAAgBA,CAACC,WAAW,EAAE;MAC5B,IAAMN,SAAQ,GAAI3C,aAAa,CAACqE,IAAI,CAAC,UAAC+B,EAAE;QAAA,OAAKA,EAAE,CAACnB,EAAC,KAAMhC,WAAW;MAAA,EAAC;MACnE,IAAI,CAACN,SAAS,EAAE,OAAO,IAAI;MAE3B,IAAM0D,KAAI,GAAIpG,kBAAkB,CAACoE,IAAI,CACnC,UAACgC,KAAK;QAAA,OAAKA,KAAK,CAACpB,EAAC,KAAMtC,SAAS,CAAC2D,gBAAe;MAAA,CACnD,CAAC;MACD,IAAM/B,WAAU,GAAI,IAAI,CAACgC,cAAc,CAACtD,WAAW,CAAC;MACpD,IAAMwB,KAAI,GAAIvE,kBAAkB,CAACmE,IAAI,CACnC,UAACI,KAAK;QAAA,OAAKA,KAAK,CAACQ,EAAC,MAAMV,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEO,gBAAe;MAAA,CACtD,CAAC;MAED,OAAO;QACLzE,IAAI,EAAEsC,SAAS,CAACtC,IAAI;QACpBqD,SAAS,EAAE2C,KAAI,GAAIA,KAAK,CAAChG,IAAG,GAAI,cAAc;QAC9CmD,SAAS,EAAEiB,KAAI,GAAIA,KAAK,CAACpE,IAAG,GAAI,cAAc;QAC9C0B,UAAU,EAAE0C,KAAI,GAAIA,KAAK,CAACS,KAAI,GAAI;MACpC,CAAC;IACH,CAAC;IAEDqB,cAAc,WAAdA,cAAcA,CAACtD,WAAW,EAAE;MAC1B;MACA,IAAMzC,YAAW,GAAI,IAAI,CAACA,YAAY,CAAC6D,IAAI,CACzC,UAACC,OAAO;QAAA,OAAKA,OAAO,CAACrB,WAAU,KAAMA,WAAU;MAAA,CACjD,CAAC;MACD,IAAI,CAACzC,YAAY,EAAE,OAAO,IAAI;;MAE9B;MACA,IAAMD,eAAc,GAAI,IAAI,CAACA,eAAe,CAAC8D,IAAI,CAC/C,UAACC,OAAO;QAAA,OAAKA,OAAO,CAACrB,WAAU,KAAMA,WAAU;MAAA,CACjD,CAAC;MACD,IAAI,CAAC1C,eAAe,EAAE,OAAO,IAAI;;MAEjC;MACA,IAAMqC,cAAa,GAAIrC,eAAe,CAACuC,SAAS,CAACmD,MAAM,CACrD,UAACC,MAAM,EAAEC,QAAQ,EAAK;QACpB,OAAO,IAAIxB,IAAI,CAACwB,QAAQ,CAACvC,IAAI,IAAI,IAAIe,IAAI,CAACuB,MAAM,CAACtC,IAAI,IACjDuC,QAAO,GACPD,MAAM;MACZ,CAAC,EACD3F,eAAe,CAACuC,SAAS,CAAC,CAAC,CAC7B,CAAC;;MAED;MACA,IAAI0D,aAAY,GAAI,IAAI;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CAEJlG,YAAY,CAACgE,MAAM;QAAAmC,KAAA;MAAA;QAAvC,KAAAF,SAAA,CAAAzB,CAAA,MAAA2B,KAAA,GAAAF,SAAA,CAAAG,CAAA,IAAAC,IAAA,GAAyC;UAAA,IAA9BpC,KAAI,GAAAkC,KAAA,CAAAG,KAAA;UACb,IAAI,IAAInC,IAAI,CAACF,KAAK,CAACb,IAAI,MAAM,IAAIe,IAAI,CAAC/B,cAAc,CAACgB,IAAI,CAAC,EAAE;YAC1D;YACA,OAAOa,KAAK;UACd,OAAO,IAAI,IAAIE,IAAI,CAACF,KAAK,CAACb,IAAI,IAAI,IAAIe,IAAI,CAAC/B,cAAc,CAACgB,IAAI,CAAC,EAAE;YAC/D;YACA,OAAO4C,aAAY,GAAIA,aAAY,GAAIhG,YAAY,CAACgE,MAAM,CAAC,CAAC,CAAC;UAC/D;;UAEA;UACAgC,aAAY,GAAI/B,KAAK;QACvB;;QAEA;MAAA,SAAAsC,GAAA;QAAAN,SAAA,CAAAO,CAAA,CAAAD,GAAA;MAAA;QAAAN,SAAA,CAAAQ,CAAA;MAAA;MACA,OAAOT,aAAa;IACtB,CAAC;IAEDX,wBAAwB,WAAxBA,wBAAwBA,CAAC5C,WAAW,EAAE;MACpC,IAAMzC,YAAW,GAAI,IAAI,CAACA,YAAY,CAAC6D,IAAI,CACzC,UAACC,OAAO;QAAA,OAAKA,OAAO,CAACrB,WAAU,KAAMA,WAAU;MAAA,CACjD,CAAC;MACD,OAAOzC,YAAW,GAAIA,YAAY,CAACgE,MAAK,GAAI,EAAE;IAChD,CAAC;IAED0C,YAAY,WAAZA,YAAYA,CAACnC,OAAO,EAAE;MACpB,IAAMN,KAAI,GAAIvE,kBAAkB,CAACmE,IAAI,CAAC,UAACW,CAAC;QAAA,OAAKA,CAAC,CAACC,EAAC,KAAMF,OAAO;MAAA,EAAC;MAC9D,OAAON,KAAI,GAAIA,KAAK,CAACpE,IAAG,GAAI,cAAc;IAC5C,CAAC;IAEDoD,aAAa,WAAbA,aAAaA,CAACC,SAAS,EAAE;MACvB,IAAMyD,aAAY,GAAI;QACpB,mBAAmB,EAAElF,OAAO,CAAC,wBAAwB,CAAC;QACtDmF,SAAS,EAAEnF,OAAO,CAAC,0BAA0B,CAAC;QAC9C,iBAAiB,EAAEA,OAAO,CAAC,oCAAoC;MACjE,CAAC;MAED,OAAOkF,aAAa,CAACzD,SAAS,KAAKzB,OAAO,CAAC,oBAAoB,CAAC;IAClE,CAAC;IAED0B,UAAU,WAAVA,UAAUA,CAAC0D,UAAU,EAAE;MACrB,IAAMC,OAAM,GAAI;QACdC,GAAG,EAAE,SAAS;QACdC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,QAAQ,EAAE;MACZ,CAAC;MACD,IAAMhE,IAAG,GAAI,IAAIe,IAAI,CAAC0C,UAAU,CAAC;MACjC,OAAO,IAAIQ,IAAI,CAACC,cAAc,CAAC,OAAO,EAAER,OAAO,CAAC,CAACS,MAAM,CAACnE,IAAI,CAAC;IAC/D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}