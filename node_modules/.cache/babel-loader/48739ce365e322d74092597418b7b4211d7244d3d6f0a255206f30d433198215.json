{"ast":null,"code":"import _toConsumableArray from \"/home/bruno/Documentos/Teste Aiko - Front END - FINAL/teste-frontend-v4/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_v_icon = _resolveComponent(\"v-icon\");\n  var _component_v_btn = _resolveComponent(\"v-btn\");\n  var _component_v_card_title = _resolveComponent(\"v-card-title\");\n  var _component_v_divider = _resolveComponent(\"v-divider\");\n  var _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  var _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  var _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  var _component_v_list_item = _resolveComponent(\"v-list-item\");\n  var _component_v_list = _resolveComponent(\"v-list\");\n  var _component_v_card_text = _resolveComponent(\"v-card-text\");\n  var _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  var _component_v_row = _resolveComponent(\"v-row\");\n  var _component_v_card = _resolveComponent(\"v-card\");\n  var _component_v_dialog = _resolveComponent(\"v-dialog\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    id: \"mapContainer\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Diálogo que mostra o histórico completo dos estados \"), _createVNode(_component_v_dialog, {\n    modelValue: $data.showHistoryDialog,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.showHistoryDialog = $event;\n    }),\n    \"max-width\": \"500px\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_v_card, null, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_v_card_title, {\n            \"class\": \"d-flex justify-space-between align-center mt-3 ml-14 text-xs-h8\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n                \"class\": \"text-h8\"\n              }, \"Histórico de Estados\", -1 /* HOISTED */)), _createVNode(_component_v_btn, {\n                size: \"x-small\",\n                variant: \"text\",\n                icon: \"\",\n                onClick: $options.closeDialog\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createVNode(_component_v_icon, {\n                    icon: \"mdi-close\"\n                  })];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_divider, {\n            color: \"teal\",\n            \"class\": \"border-opacity-100\",\n            thickness: 2,\n            inset: \"\"\n          }), _createVNode(_component_v_card_text, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_v_list, {\n                dense: \"\"\n              }, {\n                \"default\": _withCtx(function () {\n                  return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedEquipmentStateHistory, function (state, index) {\n                    return _openBlock(), _createBlock(_component_v_list_item, {\n                      key: index\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createVNode(_component_v_list_item_content, {\n                          \"class\": \"my-2\"\n                        }, {\n                          \"default\": _withCtx(function () {\n                            return [_createVNode(_component_v_list_item_title, {\n                              \"class\": \"mb-1\"\n                            }, {\n                              \"default\": _withCtx(function () {\n                                return [_createVNode(_component_v_icon, {\n                                  left: \"\"\n                                }, {\n                                  \"default\": _withCtx(function () {\n                                    return _toConsumableArray(_cache[2] || (_cache[2] = [_createTextVNode(\"mdi-calendar\")]));\n                                  }),\n                                  _: 1 /* STABLE */\n                                }), _createCommentVNode(\" Ícone ao lado da data \"), _createTextVNode(\" \" + _toDisplayString($options.formatDate(state.date)), 1 /* TEXT */)];\n                              }),\n                              _: 2 /* DYNAMIC */\n                            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, {\n                              \"class\": \"mb-1\"\n                            }, {\n                              \"default\": _withCtx(function () {\n                                return [_createVNode(_component_v_icon, {\n                                  color: $options.getStateColor(state.equipmentStateId),\n                                  left: \"\"\n                                }, {\n                                  \"default\": _withCtx(function () {\n                                    return _toConsumableArray(_cache[3] || (_cache[3] = [_createTextVNode(\"mdi-circle\")]));\n                                  }),\n                                  _: 2 /* DYNAMIC */\n                                }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"color\"]), _createCommentVNode(\" Ícone ao lado do estado \"), _createTextVNode(\" \" + _toDisplayString($options.getStateName(state.equipmentStateId)), 1 /* TEXT */)];\n                              }),\n                              _: 2 /* DYNAMIC */\n                            }, 1024 /* DYNAMIC_SLOTS */)];\n                          }),\n                          _: 2 /* DYNAMIC */\n                        }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_divider, {\n                          thickness: 3,\n                          color: \"gray\"\n                        })];\n                      }),\n                      _: 2 /* DYNAMIC */\n                    }, 1024 /* DYNAMIC_SLOTS */);\n                  }), 128 /* KEYED_FRAGMENT */))];\n                }),\n                _: 1 /* STABLE */\n              })];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_row, {\n            justify: \"center\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_v_card_actions, {\n                \"class\": \"mb-5\"\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createVNode(_component_v_btn, {\n                    variant: \"flat\",\n                    color: \"teal\",\n                    onClick: $options.closeDialog\n                  }, {\n                    \"default\": _withCtx(function () {\n                      return _cache[4] || (_cache[4] = [_createTextVNode(\"Fechar\")]);\n                    }),\n                    _: 1 /* STABLE */\n                  }, 8 /* PROPS */, [\"onClick\"])];\n                }),\n                _: 1 /* STABLE */\n              })];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      })];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","id","_createCommentVNode","_createVNode","_component_v_dialog","modelValue","$data","showHistoryDialog","_cache","$event","_withCtx","_component_v_card","_component_v_card_title","_component_v_btn","size","variant","icon","onClick","$options","closeDialog","_component_v_icon","_","_component_v_divider","color","thickness","inset","_component_v_card_text","_component_v_list","dense","_renderList","selectedEquipmentStateHistory","state","index","_createBlock","_component_v_list_item","key","_component_v_list_item_content","_component_v_list_item_title","left","_toConsumableArray","_createTextVNode","_toDisplayString","formatDate","date","_component_v_list_item_subtitle","getStateColor","equipmentStateId","getStateName","_component_v_row","justify","_component_v_card_actions"],"sources":["/home/bruno/Documentos/Teste Aiko - Front END - FINAL/teste-frontend-v4/src/components/LMap.vue"],"sourcesContent":["<template>\r\n   <div id=\"mapContainer\" />\r\n\r\n    <!-- Diálogo que mostra o histórico completo dos estados -->\r\n    <v-dialog v-model=\"showHistoryDialog\" max-width=\"500px\">\r\n      <v-card>\r\n        <v-card-title\r\n          class=\"d-flex justify-space-between align-center mt-3 ml-14 text-xs-h8\"\r\n        >\r\n          <span class=\"text-h8\">Histórico de Estados</span>\r\n          <v-btn size=\"x-small\" variant=\"text\" icon @click=\"closeDialog\">\r\n            <v-icon icon=\"mdi-close\"></v-icon>\r\n          </v-btn>\r\n        </v-card-title>\r\n        <v-divider\r\n          color=\"teal\"\r\n          class=\"border-opacity-100\"\r\n          :thickness=\"2\"\r\n          inset\r\n        ></v-divider>\r\n\r\n        <v-card-text>\r\n          <v-list dense>\r\n            <v-list-item\r\n              v-for=\"(state, index) in selectedEquipmentStateHistory\"\r\n              :key=\"index\"\r\n            >\r\n              <v-list-item-content class=\"my-2\">\r\n                <v-list-item-title class=\"mb-1\">\r\n                  <v-icon left>mdi-calendar</v-icon>\r\n                  <!-- Ícone ao lado da data -->\r\n                  {{ formatDate(state.date) }}\r\n                </v-list-item-title>\r\n                <v-list-item-subtitle class=\"mb-1\">\r\n                  <v-icon :color=\"getStateColor(state.equipmentStateId)\" left\r\n                    >mdi-circle</v-icon\r\n                  >\r\n                  <!-- Ícone ao lado do estado -->\r\n                  {{ getStateName(state.equipmentStateId) }}\r\n                </v-list-item-subtitle>\r\n              </v-list-item-content>\r\n              <v-divider :thickness=\"3\" color=\"gray\"></v-divider>\r\n            </v-list-item>\r\n          </v-list>\r\n        </v-card-text>\r\n        <v-row justify=\"center\">\r\n          <v-card-actions  class=\"mb-5\">\r\n          <v-btn variant=\"flat\" color=\"teal\" @click=\"closeDialog\">Fechar</v-btn>\r\n        </v-card-actions>\r\n        </v-row>\r\n        \r\n      </v-card>\r\n    </v-dialog>\r\n \r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport equipmentData from \"../data/equipment.json\"; // Equipamentos\r\nimport equipmentModelData from \"../data/equipmentModel.json\"; // Modelos\r\nimport equipmentStateData from \"../data/equipmentState.json\"; // Estados\r\nimport equipmentStateHistory from \"../data/equipmentStateHistory.json\"; // Histórico de Estados\r\nimport equipmentPositionHistory from \"../data/equipmentPositionHistory.json\"; // Histórico de Posições\r\n\r\nexport default {\r\n  name: \"LMap\",\r\n  data() {\r\n    return {\r\n      positionHistory: equipmentPositionHistory,\r\n      stateHistory: equipmentStateHistory,\r\n      equipmentStates: equipmentStateData, // Dados importados do JSON\r\n      showHistoryDialog: false, // Controle do diálogo de histórico\r\n      selectedEquipmentId: null, // ID do equipamento selecionado para exibir o histórico\r\n      selectedEquipmentStateHistory: [], // Histórico de estados do equipamento selecionado\r\n    };\r\n  },\r\n  mounted() {\r\n    this.createMapLayer();\r\n  },\r\n  beforeUnmount() {\r\n    // Remover o mapa e suas camadas, se necessário\r\n    if (this.map) {\r\n      this.map.eachLayer((layer) => {\r\n        this.map.removeLayer(layer); // Remover todos os layers para evitar problemas\r\n      });\r\n      this.map.remove(); // Remove completamente o mapa\r\n    }\r\n  },\r\n  methods: {\r\n    createMapLayer() {\r\n      // Inicialize o mapa localmente\r\n      const map = L.map(\"mapContainer\").setView([-23.5505, -46.6333], 5);\r\n\r\n      L.tileLayer(\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\r\n        attribution:\r\n          '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n      }).addTo(map);\r\n\r\n      map.whenReady(() => {\r\n        this.setMarkers(map);\r\n      });\r\n    },\r\n\r\n    createStateIcon(stateColor) {\r\n      try {\r\n        const iconUrl = require(\"../assets/aiko.png\");\r\n\r\n        return L.divIcon({\r\n          className: \"custom-icon\",\r\n          html: `\r\n            <div style=\"position: relative; width: 40px; height: 40px;\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"45\" height=\"60\" viewBox=\"0 0 24 24\" fill=\"${stateColor}\">\r\n                <path d=\"M12 2C8.14 2 5 5.14 5 9c0 3.39 3.27 7.94 6.36 11.54.4.47 1.12.47 1.51 0C15.73 16.94 19 12.39 19 9c0-3.86-3.14-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5S10.62 6.5 12 6.5s2.5 1.12 2.5 2.5S13.38 11.5 12 11.5z\"/>\r\n              </svg>\r\n              <img src=\"${iconUrl}\" style=\"position: absolute; top: 5%; left:55%; width: 25px; height: 12px; transform: translate(-50%, -50%);\" />\r\n            </div>\r\n          `,\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Erro ao criar o ícone de estado:\", error);\r\n      }\r\n    },\r\n\r\n    setMarkers(map) {\r\n      const bounds = [];\r\n\r\n      this.positionHistory.forEach((equipment) => {\r\n        const latestPosition = this.getLatestPosition(equipment.positions);\r\n        const equipmentInfo = this.getEquipmentInfo(equipment.equipmentId);\r\n\r\n        if (latestPosition && equipmentInfo) {\r\n          const stateColor = equipmentInfo.stateColor;\r\n\r\n          const customIcon = this.createStateIcon(stateColor);\r\n\r\n          if (latestPosition.lat !== null && latestPosition.lon !== null) {\r\n            const marker = L.marker([latestPosition.lat, latestPosition.lon], {\r\n              icon: customIcon,\r\n            })\r\n              .addTo(map)\r\n              .bindPopup(\r\n                `\r\n                  <div style=\"text-align: center; margin-bottom: 10px;\">\r\n                    <div style=\"font-size: 16px; font-weight: bold; color: ${\r\n                      equipmentInfo.stateColor\r\n                    };\">\r\n                      ${equipmentInfo.stateName}\r\n                    </div>\r\n                    <div>\r\n                      <img src=\"${this.getModelImage(\r\n                        equipmentInfo.modelName\r\n                      )}\" alt=\"${\r\n                  equipmentInfo.modelName\r\n                }\" style=\"width: 60px; height: 60px;\" />\r\n                    </div>\r\n                  </div>\r\n                  <b>Equipamento:</b> ${equipmentInfo.name} <br>\r\n                  <b>Modelo:</b> ${equipmentInfo.modelName} <br>\r\n                  <b>Última posição:</b> ${this.formatDate(latestPosition.date)}\r\n                `\r\n              );\r\n\r\n            marker.on(\"mouseover\", () => {\r\n              marker.openPopup();\r\n            });\r\n\r\n            marker.on(\"click\", () => {\r\n              this.selectedEquipmentId = equipment.equipmentId;\r\n\r\n              // Carregar o histórico de estados antes de abrir o diálogo\r\n              this.loadEquipmentStateHistory(equipment.equipmentId);\r\n\r\n              // Exibir o diálogo depois de carregar o histórico\r\n              this.showHistoryDialog = true;\r\n            });\r\n\r\n            bounds.push([latestPosition.lat, latestPosition.lon]);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (map && bounds.length > 0) {\r\n        map.fitBounds(bounds);\r\n      }\r\n    },\r\n\r\n    // Função para obter o estado mais recente baseado na última posição\r\n    getLatestStateBasedOnPosition(equipmentId, lastPositionDate) {\r\n      const stateHistory = this.stateHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n\r\n      if (!stateHistory) return null;\r\n\r\n      // Encontrar o estado cujo intervalo inclui a última data de posição\r\n      const latestState = stateHistory.states.find((state) => {\r\n        const startDate = new Date(state.date);\r\n        const endDate = new Date(state.endDate || state.date); // Supondo que `endDate` pode não estar presente e usar a mesma data para ambos os campos\r\n\r\n        return lastPositionDate >= startDate && lastPositionDate <= endDate;\r\n      });\r\n\r\n      return latestState\r\n        ? this.getStateInfo(latestState.equipmentStateId)\r\n        : null;\r\n    },\r\n\r\n    // Função para obter as informações do estado\r\n    getStateInfo(stateId) {\r\n      const state = equipmentStateData.find((s) => s.id === stateId);\r\n      return state\r\n        ? { name: state.name, color: state.color }\r\n        : { name: \"Desconhecido\", color: \"#000000\" };\r\n    },\r\n\r\n    // Função para carregar o histórico do equipamento\r\n    async loadEquipmentStateHistory(equipmentId) {\r\n      this.selectedEquipmentStateHistory =\r\n        this.getEquipmentStateHistory(equipmentId);\r\n    },\r\n\r\n    getStateColor(equipmentStateId) {\r\n      // Retorna a cor correspondente ao ID do estado\r\n      const state = this.equipmentStates.find((s) => s.id === equipmentStateId);\r\n      return state ? state.color : \"gray\"; // Retorna cinza se o estado não for encontrado\r\n    },\r\n\r\n    closeDialog() {\r\n      this.showHistoryDialog = false;\r\n    },\r\n\r\n    getLatestPosition(positions) {\r\n      return positions.reduce((latest, position) => {\r\n        return new Date(position.date) > new Date(latest.date)\r\n          ? position\r\n          : latest;\r\n      }, positions[0]);\r\n    },\r\n\r\n    getEquipmentInfo(equipmentId) {\r\n      const equipment = equipmentData.find((eq) => eq.id === equipmentId);\r\n      if (!equipment) return null;\r\n\r\n      const model = equipmentModelData.find(\r\n        (model) => model.id === equipment.equipmentModelId\r\n      );\r\n      const latestState = this.getLatestState(equipmentId);\r\n      const state = equipmentStateData.find(\r\n        (state) => state.id === latestState?.equipmentStateId\r\n      );\r\n\r\n      return {\r\n        name: equipment.name,\r\n        modelName: model ? model.name : \"Desconhecido\",\r\n        stateName: state ? state.name : \"Desconhecido\",\r\n        stateColor: state ? state.color : \"#000000\",\r\n      };\r\n    },\r\n\r\n    getLatestState(equipmentId) {\r\n      // 1. Busca o histórico de estados do equipamento\r\n      const stateHistory = this.stateHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n      if (!stateHistory) return null;\r\n\r\n      // 2. Busca o histórico de posições do equipamento\r\n      const positionHistory = this.positionHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n      if (!positionHistory) return null;\r\n\r\n      // 3. Encontra a data mais recente no positionHistory\r\n      const latestPosition = positionHistory.positions.reduce(\r\n        (latest, position) => {\r\n          return new Date(position.date) > new Date(latest.date)\r\n            ? position\r\n            : latest;\r\n        },\r\n        positionHistory.positions[0]\r\n      );\r\n\r\n      // 4. Compara a data mais recente de positionHistory com os estados de stateHistory\r\n      let previousState = null;\r\n\r\n      for (const state of stateHistory.states) {\r\n        if (new Date(state.date) === new Date(latestPosition.date)) {\r\n          // 5. Se as datas coincidirem, retorna o equipmentStateId\r\n          return state;\r\n        } else if (new Date(state.date) > new Date(latestPosition.date)) {\r\n          // 6. Se o estado atual passa a data de positionHistory, retorna o estado anterior\r\n          return previousState ? previousState : stateHistory.states[0];\r\n        }\r\n\r\n        // 7. Atualiza o estado anterior caso a data não tenha ultrapassado\r\n        previousState = state;\r\n      }\r\n\r\n      // 8. Se nenhum estado ultrapassou, retorna o estado mais recente disponível\r\n      return previousState;\r\n    },\r\n\r\n    getEquipmentStateHistory(equipmentId) {\r\n      const stateHistory = this.stateHistory.find(\r\n        (history) => history.equipmentId === equipmentId\r\n      );\r\n      return stateHistory ? stateHistory.states : [];\r\n    },\r\n\r\n    getStateName(stateId) {\r\n      const state = equipmentStateData.find((s) => s.id === stateId);\r\n      return state ? state.name : \"Desconhecido\";\r\n    },\r\n\r\n    getModelImage(modelName) {\r\n      const modelImageMap = {\r\n        \"Caminhão de carga\": require(\"../assets/caminhao.png\"),\r\n        Harvester: require(\"../assets/escavadora.png\"),\r\n        \"Garra traçadora\": require(\"../assets/garra-de-escavadeira.png\"),\r\n      };\r\n\r\n      return modelImageMap[modelName] || require(\"../assets/aiko.png\");\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      const options = {\r\n        day: \"2-digit\",\r\n        month: \"2-digit\",\r\n        year: \"numeric\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        timeZone: \"UTC\",\r\n      };\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat(\"pt-BR\", options).format(date);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n#mapContainer {\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 75vh;\r\n  z-index: 1;\r\n}\r\n.custom-icon {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}