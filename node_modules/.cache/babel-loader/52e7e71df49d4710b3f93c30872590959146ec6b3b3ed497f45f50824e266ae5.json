{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport equipmentStateHistory from \"../data/equipmentStateHistory.json\";\nimport equipmentState from \"../data/equipmentState.json\";\nimport equipmentData from \"../data/equipment.json\"; // Importar equipment.json\n\nexport default {\n  name: \"CardProductivity\",\n  props: {\n    equipmentId: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      equipmentName: \"\",\n      // Adiciona o campo para o nome do equipamento\n      totalWorkTime: 0,\n      productiveHours: 0,\n      productivityPercentage: 0\n    };\n  },\n  methods: {\n    calculateProductivity: function calculateProductivity() {\n      var _this = this;\n      // Filtra o histórico de estados para o equipmentId\n      var equipmentHistory = equipmentStateHistory.find(function (history) {\n        return history.equipmentId === _this.equipmentId;\n      });\n      if (!equipmentHistory) {\n        console.error(\"Equipamento não encontrado.\");\n        return;\n      }\n      var states = equipmentHistory.states;\n      if (states.length === 0) {\n        console.error(\"Nenhum estado encontrado para o equipamento.\");\n        return;\n      }\n\n      // Busca o nome do equipamento no equipment.json\n      var equipment = equipmentData.find(function (e) {\n        return e.id === _this.equipmentId;\n      });\n      if (equipment) {\n        this.equipmentName = equipment.name;\n      } else {\n        this.equipmentName = \"Nome não encontrado\";\n      }\n\n      // Ordena os estados por data\n      states.sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n      var totalWorkTimeMs = 0;\n      var productiveHoursMs = 0;\n      var lastStateDate = new Date(states[0].date);\n      states.forEach(function (state, index) {\n        var currentState = equipmentState.find(function (eState) {\n          return eState.id === state.equipmentStateId;\n        });\n        if (currentState) {\n          var stateDate = new Date(state.date);\n\n          // Calcula o tempo total de trabalho\n          if (index === 0) {\n            totalWorkTimeMs = stateDate - new Date(states[0].date);\n          } else {\n            totalWorkTimeMs += stateDate - lastStateDate;\n          }\n\n          // Calcula o tempo de horas produtivas\n          if (currentState.name === \"Operando\" && index < states.length - 1) {\n            var nextStateDate = new Date(states[index + 1].date);\n            productiveHoursMs += nextStateDate - stateDate;\n          }\n          lastStateDate = stateDate;\n        }\n      });\n      this.totalWorkTime = totalWorkTimeMs / 3600000; // Convertendo de ms para horas\n      this.productiveHours = productiveHoursMs / 3600000; // Convertendo de ms para horas\n      this.productivityPercentage = this.productiveHours / this.totalWorkTime * 100;\n    }\n  },\n  watch: {\n    equipmentId: \"calculateProductivity\"\n  },\n  mounted: function mounted() {\n    this.calculateProductivity();\n  }\n};","map":{"version":3,"names":["equipmentStateHistory","equipmentState","equipmentData","name","props","equipmentId","type","String","required","data","equipmentName","totalWorkTime","productiveHours","productivityPercentage","methods","calculateProductivity","_this","equipmentHistory","find","history","console","error","states","length","equipment","e","id","sort","a","b","Date","date","totalWorkTimeMs","productiveHoursMs","lastStateDate","forEach","state","index","currentState","eState","equipmentStateId","stateDate","nextStateDate","watch","mounted"],"sources":["/home/bruno/Documentos/Teste Aiko - FRONT END/teste-frontend-v4/src/components/CardProductivity.vue"],"sourcesContent":["<template>\r\n <v-card\r\n  class=\"mb-4\"\r\n  :variant=\"flat\"\r\n  color=\"teal-lighten-5\"\r\n  rounded=\"shaped\"\r\n>\r\n  <v-card-title class=\"text-center\">\r\n    <span class=\"headline text-center\">{{ equipmentName }}</span>\r\n  </v-card-title>\r\n  \r\n  <v-card-text>\r\n    <p><strong>Tempo Total de Trabalho:</strong> {{ totalWorkTime }} horas</p>\r\n    <p><strong>Horas Produtivas:</strong> {{ productiveHours }} horas</p>\r\n\r\n    <v-row justify=\"space-between\" class=\"align-center\">\r\n      <v-col>\r\n        <p><strong>Produtividade:</strong></p>\r\n      </v-col>\r\n      <v-col class=\"text-right\">\r\n        <h2 class=\"text-cyan-darken-4\">{{ productivityPercentage.toFixed(2) }}%</h2>\r\n      </v-col>\r\n    </v-row>\r\n  </v-card-text>\r\n</v-card>\r\n\r\n</template>\r\n\r\n<script>\r\nimport equipmentStateHistory from \"../data/equipmentStateHistory.json\";\r\nimport equipmentState from \"../data/equipmentState.json\";\r\nimport equipmentData from \"../data/equipment.json\"; // Importar equipment.json\r\n\r\nexport default {\r\n  name: \"CardProductivity\",\r\n  props: {\r\n    equipmentId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      equipmentName: \"\", // Adiciona o campo para o nome do equipamento\r\n      totalWorkTime: 0,\r\n      productiveHours: 0,\r\n      productivityPercentage: 0,\r\n    };\r\n  },\r\n  methods: {\r\n    calculateProductivity() {\r\n      // Filtra o histórico de estados para o equipmentId\r\n      const equipmentHistory = equipmentStateHistory.find(\r\n        (history) => history.equipmentId === this.equipmentId\r\n      );\r\n\r\n      if (!equipmentHistory) {\r\n        console.error(\"Equipamento não encontrado.\");\r\n        return;\r\n      }\r\n\r\n      const states = equipmentHistory.states;\r\n      if (states.length === 0) {\r\n        console.error(\"Nenhum estado encontrado para o equipamento.\");\r\n        return;\r\n      }\r\n\r\n      // Busca o nome do equipamento no equipment.json\r\n      const equipment = equipmentData.find(\r\n        (e) => e.id === this.equipmentId\r\n      );\r\n      if (equipment) {\r\n        this.equipmentName = equipment.name;\r\n      } else {\r\n        this.equipmentName = \"Nome não encontrado\";\r\n      }\r\n\r\n      // Ordena os estados por data\r\n      states.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n      let totalWorkTimeMs = 0;\r\n      let productiveHoursMs = 0;\r\n      let lastStateDate = new Date(states[0].date);\r\n\r\n      states.forEach((state, index) => {\r\n        const currentState = equipmentState.find(\r\n          (eState) => eState.id === state.equipmentStateId\r\n        );\r\n\r\n        if (currentState) {\r\n          const stateDate = new Date(state.date);\r\n\r\n          // Calcula o tempo total de trabalho\r\n          if (index === 0) {\r\n            totalWorkTimeMs = stateDate - new Date(states[0].date);\r\n          } else {\r\n            totalWorkTimeMs += stateDate - lastStateDate;\r\n          }\r\n\r\n          // Calcula o tempo de horas produtivas\r\n          if (currentState.name === \"Operando\" && index < states.length - 1) {\r\n            const nextStateDate = new Date(states[index + 1].date);\r\n            productiveHoursMs += nextStateDate - stateDate;\r\n          }\r\n\r\n          lastStateDate = stateDate;\r\n        }\r\n      });\r\n\r\n      this.totalWorkTime = totalWorkTimeMs / 3600000; // Convertendo de ms para horas\r\n      this.productiveHours = productiveHoursMs / 3600000; // Convertendo de ms para horas\r\n      this.productivityPercentage = (this.productiveHours / this.totalWorkTime) * 100;\r\n    },\r\n  },\r\n  watch: {\r\n    equipmentId: \"calculateProductivity\",\r\n  },\r\n  mounted() {\r\n    this.calculateProductivity();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.headline {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: rgb(46, 172, 172);\r\n  text-align: center; /* Centraliza o texto */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}