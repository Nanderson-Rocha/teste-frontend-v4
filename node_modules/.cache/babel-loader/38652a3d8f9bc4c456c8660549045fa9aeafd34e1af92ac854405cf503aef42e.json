{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  style: {\n    \"position\": \"relative\",\n    \"width\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_v_progress_circular = _resolveComponent(\"v-progress-circular\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Mapa sempre está presente no DOM, mas o spinner será exibido sobre ele \"), _createElementVNode(\"div\", {\n    id: \"mapContainer\",\n    style: _normalizeStyle({\n      opacity: $data.loading ? 0.5 : 1\n    })\n  }, null, 4 /* STYLE */), _createCommentVNode(\" Circular progress como um overlay \"), $data.loading ? (_openBlock(), _createBlock(_component_v_progress_circular, {\n    key: 0,\n    indeterminate: \"\",\n    color: \"primary\",\n    size: \"100\",\n    style: {\n      \"position\": \"absolute\",\n      \"top\": \"50%\",\n      \"left\": \"50%\",\n      \"transform\": \"translate(-50%, -50%)\"\n    }\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[0] || (_cache[0] = [_createElementVNode(\"h6\", null, \"Carregando Rota\", -1 /* HOISTED */)]);\n    }),\n    _: 1 /* STABLE */\n  })) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["style","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","id","_normalizeStyle","opacity","$data","loading","_createBlock","_component_v_progress_circular","key","indeterminate","color","size","_withCtx","_cache","_"],"sources":["/home/bruno/Documentos/Teste Aiko - Front END - FINAL/teste-frontend-v4/src/components/LMapRoute.vue"],"sourcesContent":["<template>\r\n  <div style=\"position: relative; width: 100%\">\r\n    <!-- Mapa sempre está presente no DOM, mas o spinner será exibido sobre ele -->\r\n    <div id=\"mapContainer\" :style=\"{ opacity: loading ? 0.5 : 1 }\" />\r\n    <!-- Circular progress como um overlay -->\r\n    <v-progress-circular\r\n      v-if=\"loading\"\r\n      indeterminate\r\n      color=\"primary\"\r\n      size=\"100\"\r\n      style=\"\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n      \"\r\n    >\r\n      <h6>Carregando Rota</h6>\r\n    </v-progress-circular>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet-routing-machine\";\r\nimport \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\r\nimport positionHistory from \"../data/equipmentPositionHistory.json\";\r\n\r\nexport default {\r\n  name: \"LMapRoute\",\r\n  props: {\r\n    selectedEquipmentId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    selectedDate: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      markers: [],\r\n      routeControl: null, // Para armazenar o controle de rota\r\n      loading: false, // Estado de carregamento\r\n    };\r\n  },\r\n  watch: {\r\n    // Atualizar os marcadores quando o equipamento ou a data forem modificados\r\n    selectedEquipmentId(newEquipmentId) {\r\n      this.loadMarkersFromJson(newEquipmentId, this.selectedDate);\r\n    },\r\n    selectedDate(newDate) {\r\n      this.loadMarkersFromJson(this.selectedEquipmentId, newDate);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.createMapLayer();\r\n  },\r\n  beforeUnmount() {\r\n    if (this.map) {\r\n      this.map.remove();\r\n    }\r\n  },\r\n  methods: {\r\n    loadMarkersFromJson(equipmentId, selectedDate) {\r\n      this.loading = true;\r\n      this.markers = [];\r\n\r\n      // Filtrar equipamento e data, se disponível\r\n      const equipment = positionHistory.find(\r\n        (eq) => eq.equipmentId === equipmentId\r\n      );\r\n\r\n      if (equipment) {\r\n        const filteredPositions = selectedDate\r\n          ? equipment.positions.filter(\r\n              (position) =>\r\n                new Date(position.date).toLocaleDateString(\"pt-BR\") ===\r\n                selectedDate\r\n            )\r\n          : equipment.positions;\r\n\r\n        filteredPositions.forEach((position) => {\r\n          const formattedDate = new Date(position.date).toLocaleDateString(\r\n            \"pt-BR\"\r\n          );\r\n          this.markers.push({\r\n            latitude: position.lat,\r\n            longitude: position.lon,\r\n            descricao: `Data: ${formattedDate}`,\r\n          });\r\n        });\r\n\r\n        // Adiciona a rota somente se o mapa estiver pronto\r\n        if (this.map) {\r\n          this.addRoute();\r\n        }\r\n      } else {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    createMapLayer() {\r\n      // Inicialize o mapa localmente\r\n      const map = L.map(\"mapContainer\").setView([0, 0], 2);\r\n\r\n      L.tileLayer(\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\r\n        attribution:\r\n          '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n      }).addTo(map);\r\n\r\n      this.map = map; // Armazena o mapa localmente\r\n\r\n      map.whenReady(() => {\r\n        console.log(\"Mapa carregado com sucesso!\");\r\n        this.setMarkers(map); // Certifique-se de que o mapa está pronto antes de adicionar marcadores\r\n      });\r\n    },\r\n\r\n    addRoute() {\r\n      if (!this.map || this.markers.length === 0) {\r\n        this.loading = false; // Finaliza o loading se não houver marcadores\r\n        return;\r\n      }\r\n\r\n      const waypoints = this.markers.map((marker) =>\r\n        L.latLng(marker.latitude, marker.longitude)\r\n      );\r\n\r\n      // Remove o controle de rota anterior, se existir\r\n      if (this.routeControl) {\r\n        this.map.removeControl(this.routeControl);\r\n      }\r\n\r\n      // Adiciona a nova rota e cria marcadores com popups\r\n      this.routeControl = L.Routing.control({\r\n        waypoints,\r\n        createMarker: (i, waypoint) => {\r\n          const color =\r\n            i === 0 ? \"green\" : i === waypoints.length - 1 ? \"red\" : \"darkblue\";\r\n          const number = i + 1; // Número no marcador\r\n\r\n          // Criar o marcador com o número centralizado\r\n          const icon = L.divIcon({\r\n            className: \"custom-icon\",\r\n            html: `<div style=\"background-color: ${color}; color: white; border-radius: 50%; width: 30px; height: 30px; text-align: center; line-height: 30px; font-size: 14px; font-weight: bold;\">${number}</div>`,\r\n            iconSize: [30, 30],\r\n            iconAnchor: [15, 30],\r\n          });\r\n\r\n          // Criar o marcador\r\n          const marker = L.marker(waypoint.latLng, { icon });\r\n\r\n          // Adicionar o popup com a data, latitude e longitude\r\n          const { descricao, latitude, longitude } = this.markers[i];\r\n          marker.bindPopup(`\r\n            <div>\r\n              <p><strong>Data:</strong> ${descricao}</p>\r\n              <p><strong>Latitude:</strong> ${latitude}</p>\r\n              <p><strong>Longitude:</strong> ${longitude}</p>\r\n            </div>\r\n          `);\r\n\r\n          return marker;\r\n        },\r\n        routeWhileDragging: false,\r\n      }).addTo(this.map);\r\n\r\n      this.routeControl.on(\"routesfound\", () => {\r\n        // Finaliza o loading após a rota ser traçada\r\n        this.loading = false;\r\n      });\r\n\r\n      this.routeControl.on(\"routingerror\", () => {\r\n        // Finaliza o loading em caso de erro\r\n        this.loading = false;\r\n      });\r\n    },\r\n\r\n    setMarkers() {\r\n      const bounds = [];\r\n\r\n      this.markers.forEach((markerData, i) => {\r\n        const color =\r\n          i === 0\r\n            ? \"green\"\r\n            : i === this.markers.length - 1\r\n            ? \"red\"\r\n            : \"darkblue\";\r\n        const number = i + 1; // Número no marcador\r\n\r\n        // Criar o marcador com o número centralizado\r\n        const icon = L.divIcon({\r\n          className: \"custom-icon\",\r\n          html: `<div style=\"background-color: ${color}; color: white; border-radius: 50%; width: 30px; height: 30px; text-align: center; line-height: 30px; font-size: 14px; font-weight: bold;\">${number}</div>`,\r\n          iconSize: [30, 30],\r\n          iconAnchor: [15, 30],\r\n        });\r\n\r\n        const marker = L.marker([markerData.latitude, markerData.longitude], {\r\n          icon,\r\n        }).bindPopup(`\r\n          <div>\r\n            <p><strong>Data:</strong> ${markerData.descricao}</p>\r\n            <p><strong>Latitude:</strong> ${markerData.latitude}</p>\r\n            <p><strong>Longitude:</strong> ${markerData.longitude}</p>\r\n          </div>\r\n        `);\r\n\r\n        marker.addTo(this.map);\r\n\r\n        bounds.push([markerData.latitude, markerData.longitude]);\r\n      });\r\n\r\n      if (this.map && bounds.length > 0) {\r\n        this.map.fitBounds(bounds);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#mapContainer {\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 65vh;\r\n  z-index: 1;\r\n}\r\n.custom-icon {\r\n  text-align: center;\r\n  line-height: 30px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAuC,EAAvC;IAAA;IAAA;EAAA;AAAuC;;;uBAA5CC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,mBAAA,4EAA+E,EAC/EC,mBAAA,CAAiE;IAA5DC,EAAE,EAAC,cAAc;IAAEL,KAAK,EAHjCM,eAAA;MAAAC,OAAA,EAG8CC,KAAA,CAAAC,OAAO;IAAA;2BACjDN,mBAAA,uCAA0C,EAElCK,KAAA,CAAAC,OAAO,I,cADfC,YAAA,CAasBC,8BAAA;IAlB1BC,GAAA;IAOMC,aAAa,EAAb,EAAa;IACbC,KAAK,EAAC,SAAS;IACfC,IAAI,EAAC,KAAK;IACVf,KAKC,EALD;MAAA;MAAA;MAAA;MAAA;IAAA;;IAVN,WAAAgB,QAAA,CAiBM;MAAA,OAAwBC,MAAA,QAAAA,MAAA,OAAxBb,mBAAA,CAAwB,YAApB,iBAAe,oB;;IAjBzBc,CAAA;QAAAf,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}